pico-8 cartridge // http://www.pico-8.com
version 42
__lua__


-- map loading
-- switchable blocks

function unload_map()
	character = {}
	particleCollection = {}
	mushroomCollection = {}
	for x=0,15 do
		for y=0,15 do
			mset(x,y,0)
		end
	end
end

function load_map(mapIndex)

	local mapString = map_collection[mapIndex]

	local x,y = 0,0
	for tileId in all(split(mapString,",")) do
		-- the only tiles which we use as specials
		-- are gonna be the spirits = 12
		-- the mushrooms and the flips for the mushrooms
		if tileId == SPIRIT_TILE then
			add_character(x, y)
			mset(x, y, 18)
		elseif tileId == MUSHROOM_ON_TILE then
			add_mushroom(x, y, true)
			mset(x, y, 18)
		elseif tileId == MUSHROOM_OFF_TILE then
			add_mushroom(x, y, false)
			mset(x, y, 18)
		else
			mset(x, y, tileId)
		end

		y+=1
		if y > 15 then
			y = 0
			x += 1
		end
	end
end

function export_map()
	local mapString = ""
	
	for x=0,15 do
		for y=0,15 do
			mapString = mapString..mget(x,y)..","
		end
	end
	printh(mapString, '@clip')
end


-- function to add characters to the game
-- at any point on the map
function add_character(_x, _y)
	local p = {
		x = _x,
		y = _y,
		direction = 5,
		doReplaceOldTile = false,
		replaceTileId = 0,
		reachedGoal = false
	}
	-- set it's tile to the player tile
	-- mset(p.x, p.y, 4)
	-- add it to the collection
	add(characters, p)
end

-- add mushrooms to x, y. They are on-off
-- block that are triggered to flip their 
-- state when character steps on specific
-- tiles
function add_mushroom(_x, _y, _isOn)
	local m = {
		x = _x,
		y = _y,
		isOn = _isOn
	}
	add(mushroomCollection, m)
end

function add_particle(_x, _y, _sx, _sy, _lifetime, _color, _radius, _type)
	local part = {
		x = _x,
		y = _y,
		sx = _sx,
		sy = _sy,
		lifetime = _lifetime,
		color = _color,
		radius = _radius,
		type = _type
	}

	add(particleCollection, part)
end

function _init()
	map_collection = {
		"0,0,0,0,0,0,36,0,0,21,18,45,14,18,47,14,0,36,0,0,0,0,0,0,0,21,61,18,18,45,18,18,0,0,0,1,19,14,14,0,0,0,5,5,18,18,14,14,0,0,0,2,12,19,18,0,36,0,0,0,18,18,18,18,0,0,0,14,19,62,18,0,0,0,0,4,18,18,61,18,0,37,0,62,19,19,18,0,0,0,21,18,45,18,18,47,0,0,0,2,19,14,18,0,0,0,21,18,47,18,45,18,0,0,0,14,19,14,18,0,0,0,21,18,18,18,18,14,0,0,0,2,19,19,18,0,0,36,21,18,14,18,18,18,0,0,0,2,14,19,18,0,0,0,21,18,18,18,18,61,0,36,0,45,19,19,14,0,0,0,21,18,14,18,14,18,0,0,0,2,14,30,18,0,0,0,6,18,14,14,18,18,0,0,0,3,45,19,14,0,0,21,18,14,18,18,14,14,0,0,0,0,0,0,0,0,0,21,18,18,18,61,18,14,0,0,0,0,0,0,0,0,0,21,47,18,18,45,18,14,0,0,37,0,0,0,0,36,0,21,18,18,14,18,18,18,",
		"0,0,0,0,0,0,36,0,0,21,18,45,14,18,47,14,0,36,0,0,0,0,0,0,0,21,61,18,18,45,18,18,0,0,0,0,0,0,0,0,0,0,5,5,18,18,14,14,0,0,0,18,18,30,14,0,36,0,0,0,18,18,18,18,0,0,0,2,14,2,14,0,0,0,0,4,18,18,61,18,0,37,0,2,12,2,18,0,0,0,21,18,45,18,18,47,0,0,0,14,19,19,14,0,0,0,21,18,47,18,45,18,0,0,0,0,0,0,0,0,0,0,21,18,18,18,18,14,0,0,0,0,36,0,0,0,0,36,21,18,14,18,18,18,0,0,0,0,0,0,0,0,0,0,21,18,18,18,18,61,0,36,0,14,14,18,30,0,0,0,21,18,14,18,14,18,0,0,0,14,2,14,2,0,0,0,6,18,14,14,18,18,0,0,0,2,12,18,62,0,0,21,18,14,18,18,14,14,0,0,0,14,19,45,18,0,0,21,18,18,18,61,18,14,0,0,0,0,0,0,0,0,0,21,47,18,18,45,18,14,0,0,37,0,0,0,0,36,0,21,18,18,14,18,18,18,",
		"18,18,18,14,14,14,14,18,14,18,18,14,18,62,18,47,18,62,14,18,47,18,18,14,18,14,14,18,18,18,18,18,18,14,18,14,18,18,30,18,14,18,14,18,14,18,14,18,62,14,18,14,18,14,18,18,14,14,18,14,18,18,18,62,18,18,14,14,18,47,18,18,14,14,14,18,18,62,18,18,14,18,14,12,18,18,46,18,14,18,47,18,14,18,18,47,18,18,14,18,18,18,18,14,62,14,18,14,18,18,14,18,14,18,18,14,14,14,14,18,18,14,14,18,18,18,18,18,18,14,62,18,14,14,18,14,14,18,14,14,62,18,18,18,18,18,18,18,18,14,14,18,18,14,18,14,18,14,62,18,35,0,0,0,3,62,14,18,47,18,18,14,18,18,18,18,0,0,0,0,0,18,18,14,12,14,30,14,14,18,47,18,0,0,37,0,0,18,14,18,18,14,18,14,18,18,18,18,0,0,0,0,0,18,14,14,14,18,14,18,18,47,18,18,0,0,0,0,1,18,18,18,18,18,18,62,18,18,62,18,0,0,0,0,3,18,18,18,18,14,18,18,18,14,18,18,",
		"18,18,14,14,14,18,14,14,14,18,18,14,18,14,18,46,18,46,18,18,18,46,18,18,18,18,61,18,18,14,18,14,18,14,12,14,18,14,18,14,18,46,18,14,18,18,46,14,18,18,18,18,18,61,18,18,18,18,18,18,30,18,14,18,14,18,18,18,14,18,18,14,18,18,14,18,18,14,18,14,0,0,0,0,0,5,0,0,5,5,0,5,5,0,0,0,0,38,0,0,1,33,0,0,0,0,0,0,36,0,0,37,36,0,0,0,3,35,0,0,36,0,38,0,0,0,36,0,0,4,4,0,0,0,4,4,0,0,0,4,4,0,0,0,1,14,18,61,18,14,46,18,18,14,18,46,18,14,18,14,18,14,14,18,14,18,18,14,18,14,14,14,47,18,18,14,14,18,14,18,18,14,18,18,46,18,18,18,14,18,14,18,61,18,18,18,18,18,18,18,18,18,18,18,18,14,18,14,18,14,18,46,18,18,18,14,18,18,14,18,46,18,47,14,18,12,18,18,18,18,18,18,46,61,18,14,18,18,14,18,18,18,18,18,18,46,18,18,18,18,18,14,30,18,14,18,",
		"14,18,18,18,18,18,14,14,18,46,18,14,18,18,18,14,46,18,14,14,46,18,18,14,18,18,18,18,14,18,14,18,18,18,14,18,18,18,18,18,18,14,18,46,18,14,14,14,14,18,18,18,12,14,18,18,62,18,30,18,18,14,18,14,47,18,18,18,18,18,14,18,18,18,18,14,18,14,14,14,18,18,14,18,47,18,46,18,14,18,18,18,18,14,14,14,14,18,18,18,14,18,46,14,35,0,0,0,3,18,14,18,14,18,18,14,18,14,18,14,0,0,37,0,0,18,14,14,18,14,14,14,18,18,14,14,0,0,38,0,0,18,14,14,14,18,18,14,18,14,14,18,33,0,0,0,1,18,45,14,18,14,18,18,14,18,18,18,18,45,18,18,14,18,18,14,14,18,18,47,18,18,62,46,18,18,14,18,18,14,18,14,14,18,18,18,18,18,18,18,18,12,18,18,18,14,14,14,14,18,30,18,18,18,18,18,18,18,14,18,18,18,14,14,18,18,18,14,18,62,46,45,18,18,18,18,45,14,14,14,61,18,18,18,18,18,18,18,61,18,18,18,14,14,14,14,",
		"0,0,0,0,0,0,0,0,0,21,18,45,14,18,47,14,0,0,0,0,0,38,0,0,0,21,61,18,18,45,14,18,0,0,0,0,0,0,0,0,0,0,5,5,18,29,14,14,0,0,0,1,18,47,33,0,0,0,0,0,29,18,18,18,36,0,0,2,14,29,15,0,0,0,0,0,14,12,61,18,0,0,0,30,29,2,34,0,0,0,0,1,29,18,18,47,0,0,0,14,14,19,15,0,0,0,0,18,47,29,29,14,0,0,0,2,14,2,2,2,2,33,0,47,18,18,18,14,0,0,0,14,2,2,46,2,14,34,0,18,14,18,18,18,0,0,0,14,14,27,2,12,47,34,0,18,18,18,14,61,0,36,0,2,14,18,2,2,2,35,0,18,47,18,18,18,0,0,0,14,2,14,34,0,0,0,0,18,18,30,18,18,0,0,0,2,47,18,14,0,0,0,0,14,18,18,18,14,0,37,0,3,14,45,35,0,0,0,21,18,18,61,18,18,0,0,0,0,0,0,0,0,0,0,21,18,18,45,18,14,0,0,37,0,0,0,0,36,0,0,21,18,14,14,14,18,"
	}
	level = 6
	export_map()
	-- have a direction table that shows how to move 
	-- on x and y to get to the next tile in said direction
	-- it is always mapped to the buttons, so 0 is left, 1 is right
	-- 2 is up, 3 is down, 4 is neutral
	directionTable = {
		{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {0, 0}
	}
	characters = {}
	--add_character(5,4)
	--add_character(12,4)
--	add_character(4,10)
--	add_character(10,10)

	-- create the state machine
	-- and the various update and draw
	-- functions for each state
	state = "menu"
	TREE_TILE = 14
	TREE_TILE_WATER = 15
	SHRINE_TILE = 30
	SPIRIT_TILE = 12
	MUSHROOM_ON_TILE = 29
	MUSHROOM_OFF_TILE = 28
	MUSHROOM_FLIP = 27

	-- store all he particles here
	particleCollection = {}
	mushroomCollection = {}
	unload_map()
	load_map(level)
end

function _update()
	if state == "menu" then
		update_menu()
	elseif state == "game" then
		update_game()
	elseif state == "won" then
		update_won()
	elseif state == "select" then
		update_select()
	end
end

function update_menu()
	-- just press a button to get
	-- into the game
	if btnp(5) then
		state ="game"
	end
end

function update_game()
	-- let's say we won already
	local won = true
	-- check movement for each character
	for i=1,#characters do
		update_player(i)
		if (characters[i].reachedGoal != true) then won = false end
	end

	update_particles()

	if won and (#particleCollection == 0) then
		state = "won"
	end
end

function update_won()
	if btnp(5) then
		level += 1
		unload_map()
		load_map(level)
		state = "game"
	end
end

function update_particles()
	-- loop over each particle and 
	-- update it is
	for index=#particleCollection, 1, -1 do
		local particle = particleCollection[index]
		-- now we have the particleicle
		-- move it with speed inside sx and sy
	 	particle.x += particle.sx
		particle.y += particle.sy
		-- reduce the lifetime
		particle.lifetime -= 1
		-- handles particle types differently
		if particle.type == 1 then
			-- shrink the particle as it gets older
			local sizeTable = {0.5, 1, 1.5, 2}
			local sizeIndex = flr(particle.lifetime/2)+1
			particle.radius = sizeTable[sizeIndex]
		end


		if particle.lifetime <= 0 then
			del(particleCollection, particle)
		end

	end

end

function update_player(_index)
	local character = characters[_index]

	-- save pressed direction for character
	-- only count if the character is already stopped
	-- or only move if it is not in the goal position
	if (character.direction == 5) and (not character.reachedGoal) then
		if btnp(0) then character.direction = 1 end
		if btnp(1) then character.direction = 2 end
		if btnp(2) then character.direction = 3 end
		if btnp(3) then character.direction = 4 end
	end

	-- see if next tile in that direction is walkable
	local nextTile = mget(character.x + directionTable[character.direction][1], character.y + directionTable[character.direction][2])
	local newPosX, newPosY = character.x + directionTable[character.direction][1], character.y + directionTable[character.direction][2]
		
	local isNewTileEmpty = true
	-- if it is not empty void
	-- move the character there
	-- 0 is void, 2 is wall for now
	-- do not allow the step if ther eis another character there
	for chr in all(characters) do
		if chr != character then
			if (chr.x == newPosX) and (chr.y == newPosY) then
				isNewTileEmpty = false
			end
		end
	end
	-- also set isNewTileEmpty if there is a muhrooom there
	-- only want to count the mush that is on
	for mush in all(mushroomCollection) do
		if (mush.x == newPosX) and (mush.y == newPosY) and (mush.isOn) then
			isNewTileEmpty = false
		end
	end

	if (character.direction != 5) then
		sfx(0)
	end

	if (nextTile != 0) and (nextTile != TREE_TILE) and (nextTile != TREE_TILE_WATER) and (isNewTileEmpty) and (not character.reachedGoal) then
		local oldPosX, oldPosY = character.x, character.y
		-- if the player was on a normal tile, reset it to that (1)
		-- if the player was on a directional tile and has it's replace
		-- flag set, then fetch the directional tile that I need to replace
		-- this is what will preserve the arrow tiles instead of just replacing them with
		-- normal empty tiles
		-- local tileToReset = character.doReplaceOldTile and character.replaceTileId or 1
		-- if I have fetched the new reset tile, then turn off the flag for it
		-- if tileToReset != 1 then character.doReplaceOldTile = false end
		
		-- move the character
		character.x, character.y = newPosX, newPosY
		
		add_particle(character.x*8+4, character.y*8+4, 0, 0, 8, 7, 1, 1)
		-- check if new tile is redirectional
		if (nextTile > 47) and (nextTile < 52) then
			-- arrow tiles are 48,49,50,51
			-- if I substract 47 then I conver the
			-- tileId to the direction it represents
			character.direction = nextTile - 47

			-- set the flag so the character remembers to set it back
			-- character.doReplaceOldTile = true
			-- save what needs to be reset
			-- character.replaceTileId = nextTile
		end
		-- reset the tile the character was on
		-- mset(oldPosX, oldPosY, tileToReset)
		-- this is what sets the character
		-- mset(newPosX, newPosY, 4)

		-- we want to check if the player's next tile is a flip tile
		-- for mushromms, is so we want to inver them
		-- only allow the flip if the character on is stationary
		if (nextTile == MUSHROOM_FLIP) and (character.direction != 5) then
			for mush in all(mushroomCollection) do
				for i=0,8 do
					-- let's have two color pairs, one for mush goin down, one for mush going up
					local colorPairs = { {8,7}, {4,8}}
					-- if mush is on, then it is gonna go down,
					-- so we grab the second pair from colors,
					-- if it is off then it is going up, so we want
					-- the white-red
					local colorIndex = mush.isOn and 2 or 1
					add_particle(mush.x*8+4, mush.y*8+4, rnd({-0.5, 0.5})*rnd(), -rnd(), 15, rnd(colorPairs[colorIndex]), rnd({0.5,1})) 
				end
				mush.isOn = not mush.isOn
			end
		end


		-- if the spirit is in the shrine
		if (nextTile == SHRINE_TILE) and (character.reachedGoal == false)  then
		sfx(1)
			character.reachedGoal = true
			character.direction = 5
			mset(newPosX, newPosY, SHRINE_TILE + 1)
			-- let's add more particle to it
			for i=0,15 do
				add_particle(character.x*8+4, character.y*8+4, rnd({-1, 1})*rnd(), -rnd(), 30, rnd({12,14}), rnd({0.5, 1})) 
			end
		end
	else
		-- if movement is not possible do to void(0), wall(2) 
		-- or another player(4) then stop movement
		character.direction = 5
	end

end

function _draw()
	if state == "menu" then
		draw_menu()
	elseif state == "game" then
		draw_game()
	elseif state == "won" then
		draw_won()
	elseif state == "select" then
		draw_select()
	end
	print(state, 0, 120, 8)
end

function draw_menu()
	cls()
	print("menu", 64, 64, 7)
end

function draw_game()
	cls(12)
	map()

	draw_particles()

	-- draw the mushroom
	for mush in all(mushroomCollection) do
		spr(mush.isOn and MUSHROOM_ON_TILE or MUSHROOM_OFF_TILE, mush.x*8, mush.y*8)
	end

	-- when drawing characters create a few circles that can
	-- wiggle around how they want
	for character in all(characters) do
		local sprite = (time()%0.5 > 0.25) and 12 or 13
		if (not character.reachedGoal) then
			spr(sprite, character.x*8, character.y*8)
		end
		--print("웃", character.x*8, character.y*8, 7)
	end

	
end

function draw_particles()
	-- we don't have to worry about deleting stuff
	-- so we can use for all
	for particle in all(particleCollection) do
		circfill(particle.x, particle.y, particle.radius, particle.color)
	end
end

function draw_won()
	cls()
	draw_game()
	print("won", 64, 64, 7)
end























__gfx__
000000000333333333333333333333300000000330000000000000030000000000000000000000000eeeeeeeeeeeeee000011000000000003311113333111133
000000003333333333333333333333330000000330000000000000030000000000000000000000000eeeeeeeeeeeeee0001771000001100031bbb31331bbb313
007007003333333333333333333333330000000330000000000000030000000000000000000000000eeeeeeeeeeeeee0017777100017710031b3b31331b3b313
000770003333333333333333333333330000000330000000000000030000000000000000000000000eeeeeeeeeeeeee0171177710171771031b3331331b33313
0007700033333333333333333333333300000003300000000000000300000000000000000000000000000000000eeee001171711001177711bbbbbb11bbbbbb1
007007003333333333333333333333330000000330000000000000030000000000000000000000000eeee0eeee0eeee000177771001717111112411111124111
000000003333333333333333333333330000000330000000000000030000000000000000000000000eeee0eeee0eeee000117711000177711112411131124113
000000003333333333333333333333330000000330000000333333330000000000000000000000000eeee0eeee0eeee0000111100001111131111113d555555d
000000003333333333333333333333333333333300000000000000000000000000000000000000000eeee0ee3333333300000000001111003313313333f33133
0000000033333333333333333333333300000000000000000000000000000000000000000000000000000000313333130000000001887710313115133fef1613
000000003333333333333333333333330000000000000000000000000000000000000000000000000eeee0ee3313313300000000187877813135551331366613
000000003333333333333333333333330000000000000000000000000000000000000000000000000eeee0ee33311333000000001888888131515113316c6c13
000000003333333333333333333333330000000000000000000000000000000000000000000000000eeee0ee3331133300011000189ff9813155551331666613
000000003333333333333333333333330000000000000000000000000000000000000000000000000eeee0ee3313313300187100001ff1003313513333136133
00000000333333333333333333333333000000000000000000000000000000000000000000000000000000003133331301788810011ff1103113311331133113
00000000333333333333333333333333000000003333333300000000000000000000000000000000000000003333333300111100011111103111111331111113
00000000333333333333333333333333000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
00000000333333333333333333333333033003300000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
00000000333333333333333333333333033333300000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
000000003333333333333333333333330333333000003300003300000000000000000000000000000000000000000000000000003333333333333333333f3333
00000000333333333333333333333333033333300040339009330400000000000000000000000000000000000000000000000000333333333333333333fef333
000000003333333333333333333333330d3333d0004422000022440000000000000000000000000000000000000000000000000033b333333333b33333bf3333
00000000d3333333333333333333333d00dddd00001111000011110000000000000000000000000000000000000000000000000033b3b33333b3b3b3333b33b3
000000000dddddddddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
000d00000000d000000dd000000dd000000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
00d0000000000d0000dddd00000dd000000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
0dddddd00dddddd00d0dd0d0000dd0000000000000000000000000000000000000000000000000000000000000000000000000003387333333333b3333333333
0dddddd00dddddd0000dd0000d0dd0d0000000000000000000000000000000000000000000000000000000000000000000000000378883333333b3b333333333
00d0000000000d00000dd00000dddd0000000000000000000000000000000000000000000000000000000000000000000000000033ff33b33b33b33333333333
000d00000000d000000dd000000dd0000000000000000000000000000000000000000000000000000000000000000000000000003333333333b3b33333333333
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000333333333333333333333333
__map__
120e1212120e122f0e121212120e121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12120e12120e1212120e120e12120e2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e120e0e0e0e0e0e0e122f120e0e120e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
120e1d2f12121d12120e120e121b120e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0e121d120c121d121e12120e1212121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12121d1212121d1212120e0e120c120e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
120e0e0e0e0e0e12120e12121212120e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12120e12120e3d122e2f120e1212121200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
122f120e0e121212121212120e1d120e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12123d1212122e12123d122e121e0e1200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2222222222222222222222222222222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000250000000000000025000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0024000000002500002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002500000000000000000000250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100001105000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003000004550055500855015550145501455014550185501e5401f540245302d52021520275102a500205002d5002e5003250032500325002e500265002650026500265002650032500265002e5003a5002e500
